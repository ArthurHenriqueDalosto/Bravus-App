@page "/login"
@using BravusApp.Client.Model
@using BravusApp.Client.Services
@using BravusApp.Shared.RequestModels
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@inject IAuthService Auth
@inject NavigationManager _nav
@inject IJSRuntime JS
@attribute [AllowAnonymous]
@inject Services.SnackbarService _snackbar

<div class="brv-auth">
    <div class="content">
        <div class="brand">BRAVUS</div>
        <div class="field">
            <label class="label">CPF:</label>
            <input class="input-custom" value="@FormatarCpf(model.Cpf)" @oninput="HandleCpfInput" placeholder="Digite seu CPF" />
        </div>
        <div class="field">
            <label class="label">Senha:</label>
            <div class="field pswd">
                <input type="password" class="input-custom pswd" placeholder="Digite sua Senha " @bind="model.Password" autocomplete="current-password" />
            </div>
        </div>
        <button class="primary" disabled="@(string.IsNullOrWhiteSpace(model.Cpf) || string.IsNullOrWhiteSpace(model.Password))" @onclick="(() => LoginAction())">
            @(_loading ? "Entrando..." : "Entrar")
        </button>

        <div class="row">
            <a class="link" @onclick="@(() => {_snackbar.Show("Entre em contato com o BV Arthur e Solicite o reset de senha!", SnackbarType.Info);})">Esqueci a senha</a>
        </div>
    </div>
</div>

@code {
    public LoginRequest model { get; set; } = new();
    public bool _loading { get; set; } = false;
    public bool _showPwd { get; set; } = false;
    public bool selected { get; set; } = false;
    string? _error;

    public async Task LoginAction()
    {
        try
        {
            var response = await Auth.LoginAsync(model);
            if (response.Data != null)
            {
                _nav.NavigateTo("/");
            }
            else
            {
                await _snackbar.Show(response.Message, SnackbarType.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erro inesperado: " + ex.Message);
        }
    }

    private void HandleCpfInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? "";
        model.Cpf = new string(input.Where(char.IsDigit).ToArray());
    }

    private string FormatarCpf(string? cpf)
    {
        var digits = new string(cpf?.Where(char.IsDigit).ToArray() ?? []);
        if (digits.Length <= 3)
            return digits;
        if (digits.Length <= 6)
            return $"{digits[..3]}.{digits[3..]}";
        if (digits.Length <= 9)
            return $"{digits[..3]}.{digits[3..6]}.{digits[6..]}";
        if (digits.Length <= 11)
            return $"{digits[..3]}.{digits[3..6]}.{digits[6..9]}-{digits[9..]}";

        return $"{digits[..3]}.{digits[3..6]}.{digits[6..9]}-{digits[9..11]}";
    }
}
